# Java-Sheet (Madhur's Cheat Sheet)

## Table of Contents

### Chapter I: Java Basics
- Source Code to Bytecode
- JVM and Platform Independence

### Chapter II: Object-Oriented Programming (OOP)
- Classes and Objects
- State and Behavior

### Chapter III: Main Method
- `public static void main(String[] args)`
- CLI Arguments

### Chapter IV: Data Types
- Primitive vs. Reference Types
- Examples and Characteristics

### Chapter V: OOP Principles
- Encapsulation
- Inheritance
- Abstraction
- Polymorphism

### Chapter VI: Constructors, Variables & Operations
- Constructors,
- Variables,
- Operations,


### Chapter VII: Packages, Access-Modifiers, Exceptions
- Packages,
- Access-Modifiers,
- Exceptions,


### Chapter VIII: Arrays
- Basics of Arrays
- Basics of ArrayLists


------------------------------------------------------------------------------------<CHAPTER-I>-------------------------------------------------------------------------------------------------


src(.java) -------> byteCode(.class) ------------------jvm interprets the byte-code(.class) & JIT(just-in-time compiles the interpreted byte-code to --> )---------------------->(machine-code) 
           javac                                  
                          (Platform-Independence) [Any machine that has 'jvm' can execute the .class file]




------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------<CHAPTER-II>------------------------------------------------------------------------------------------------




# Java Oops
- Style of programming, Where we organize our programs around data rather than logic & objects rather than actions.

**Class** - Blueprint that outlines the structure of our program.

**Object** - Programming representation of real-world entity.

- JVM creates objects, With the help of Class, Hence called 'blueprint'.

                                            
Class(Blueprint) -------------------------> JVM ----------------------> Objects
                  with the help of class    |          creates
                                            |
                                            | state & behaviour information
                                            |
                                            |
                                        Programmer(US)  


- Now Programmer needs to provide more information, JVM is concerned about just 2 information about any object:
   - **State**: Represents it's properties, The 'attributes' possibly distinguishing 1 object from the other.
   - **Behaviour**: Represents the actions Object might perform.

- *Note*: Behaviours are represented via non-static methods.



------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------<CHAPTER-III>-----------------------------------------------------------------------------------------------



## public static void main(String[] args){}:

   - main method: [Entry-point of out program]

   - String[]: To accept the `cli` arguments. (command line interface)

   - args: Accessible as array of string. [can be hello/apple/args/etc]

   - Can also write: (String...args) [Allows method to accept 0 or more arguments.]




------------------------------------------------------------------------------------<CHAPTER-IV>-----------------------------------------------------------------------------------------------
// Data - Types in JAVA

// --- Primitive Types ---

boolean       // true or false
float         // Single-precision (4 bytes) | e.g., 3.14f
double        // Double-precision (8 bytes) | e.g., 3.14159265358979
byte          // Integer (1 byte) | Range: -128 to 127
short         // Integer (2 bytes) | Range: -32,768 to 32,767
int           // Integer (4 bytes) | Range: -2^31 to 2^31-1
long          // Integer (8 bytes) | Range: -2^63 to 2^63-1 | e.g., 123L
char          // Single character (2 bytes) | Unicode values


// --- Reference Types (Non-Primitive) ---

String        // Ex., "Hello, Java!"
int[]         // Array of integers
ArrayList     // Dynamic array | java.util.ArrayList
LinkedList    // Dynamic list | java.util.LinkedList
Map           // Key-value pairs | java.util.HashMap
Set           // Unique collection | java.util.HashSet
Pair          // Tuple-like structure | javafx.util.Pair



// --- Examples of Loops ---
for (int i = 0; i < 5; i++) {
    System.out.println(i);
}

for (int num : new int[]{1, 2, 3}) {
    System.out.println(num);
}

// --- Stream Example ---
IntStream.range(1, 5).forEach(System.out::println);

// --- Special Cases ---
String name = null; // Equivalent to None in Python
 

 
// primitive-types (non-objects)-------------------------------

// byte, short, int, long
// float, double
// char
// boolean

// reference-types (objects) or non-primitive-types------------

// String
// int[] & String[] arrays
// ArrayList




---------------------------------------------------------------------------------Data-Types in .java------------------------------------------------------------------------------------------



- **Primitive-Data-Type**                                      | - **Non-Primitive-Data-Type**
  - Are passed by values                                       |   - Are passed by reference
  - Basic data-types [Pre-defined].                            |   - Reference-Type.
  - Are not objects.                                           |   - Are Objects.
  - Immutable.                                                 |   - Immutable/ Mutable.
  - Non-Nullable.                                              |   - Nullable.
  - Hold data directly in memory.                              |   - Stores reference to objects.
  - Stored in stack.                                           |   - Stored in Heap [Reference stored in stack].
  - Doesn't have methods.                                      |   - Have methods.
                                                               |
  - Ex. byte, short, int, long, float, double, char, boolean...|   - Ex. ArrayList                                         [Mutable],
                                                               |   -     Arrays[String & int], String,**Wrapper-Classes**  [Immutable].
                                                               |   -     Custom-Classes, Objects                           [Mutable but can be made imutable]


Note: String is an immutable object.


// Q1: Why are primitive types immutable?
// Ans: Primitive types represent raw values stored directly in memory and are not tied to objects or references.
//      When you modify a primitive, a completely new value is created or assigned in memory.


// Example 1: Primitive Type-----------------------------------------------------------------------------------------------

   int a = 10;  // The value 10 is directly stored in the memory allocated for 'a'.
   a = 20;      // A new value (20) is stored, replacing the previous value.

// Example 2: String (Immutable Object)------------------------------------------------------------------------------------

   String s = "hello"; // Let 's' be stored at memory address 'abcX123'.
   s += " world";      // Concatenation creates a new String at a different address, e.g., 'xyzY456'.

   System.out.println(s); // Prints "hello world".
   // The original memory location ('abcX123') remains unchanged.






------------------------------------------------------------------------------------<CHAPTER-V>-----------------------------------------------------------------------------------------------


## Pillars of Oops

- **Encapsulation**: Process of wrapping data & methods into a single unit.

- **Inheritence**: Process of inheriting properties of 'Parent(Super)-Class' by 'Child(Sub)-Class'.
  
- **Abstraction**: Process of hiding complex implementation details of an Object & Showing only the essential features of an object.

- **Polymorphism**: Ability of different classes to be treated as instance of same class.




### Detailed Explanation for Pillars of Oops
-----------------------------------------------------------------------------------------------------------------


- **Encapsulation**: Giving controlled access to very important aspect of application/code.
  - Pros
    - Enhances the Security.s
    - Access-Control.
    - Data-Protection.
    - Organized-Structure.
    - Easy-Update.

  - Ex. Secure digital bagpack



-----------------------------------------------------------------------------------------------------------------


- **Inheritence**: Extending the properties from parent to child.
  - Pros
    - Reuseability,
    - Minimize Duplication,
    - No need to re-enter basic details,
    - Core information remains same,
    - Each feature can add it's own specialized information, While retaining basic details.

  - Cons
    - Super & Sub Class can be tightly-coupled.


  - Ex. GrandFather ---> Father ---> Child


  - Types:
  - 1). Single-Level, [Base-Class ---------> Derived-Class]
                       parent                 child


  - 2). Multi-Level,  [Base-Class ---------> Derived-Class ---------> Derived-Class]
                        shape                  rectangle              Equilateral-Triangle
                      
              
  - 3). Hierarchial,  [Base-Class ---------> Derived-Class]
                        shape                  rectanlge
                        |
                        |
                        v
                      [Derived-Class]
                        circle

                        

  - 4). Hybrid,       [Combination of above types]

  - 5). Multiple,     [Doesn't Exists in Java as inheritence but rather as Interface]



-----------------------------------------------------------------------------------------------------------------


- **Abstraction**: Hiding complex implementation details from users.
  - Pros
    - Simplicity,
    - Flexibility,
    - Enhanced UX,
    - Focus on Essentials,
    - Provides you with essential details & information/controls without exposing complex mechanics underneath.

  - Can-not be **instantiated**. (& may or may not include abstract-method). [An abstract class cannot be instantiated directly but can be subclassed.]





### Q  Difference B/W Abstract-Class & Interface(Multiple-Inheritence) [Nurullah, U CAN IGNORE THE THEORY OF INTERFACE FOR NOW.... WE'LL COVER IT IN NEXT LECTURE.]

- **Abstract-Class**                           | - **Interface**

  - Can have both abstract & concrete method.  |   - All methods are abstract or default.
                                               |
  - Can have instance variables.               |   - Only constants (public static final).
                                               |
  - Single Level inheritence.                  |   - Achieves multiple inheritence.
                                               |
  - Access Modifiers.                          |   - All methods are public.
                                               |
  - Can have 'Constructors'.                   |   - Cannot have 'Constructors'.
                                               |
  - Methods can have body.                     |   - Methods can not have body untilunless they're declared as "default".
                                               |
  -                                            |   - @Override annotation is not mandatory but highly recommended.
                                               |
                                               |   - Lambda [ Way of interface ]


-----------------------------------------------------------------------------------------------------------------


- **Polymorphism**: Single Entity Taking multiple forms.
  - Pros
    - Flexibility,
    - Single Entity taking multiple forms.

  - Ex. Animal ---> Dog / Elephant / Lion etc...

  - Types:
  - 1). Compile time polymorphism [We create different-different functions but with same name.]
  - 2). Run time polymorphism [Will learn in inheritence]


-----------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------


### Polymorphism

- **Static or Compile** ----------------> Method-Overloading
        |
        |
        |
        V
      Operator-Overloading



- **Dynamic or Runtime** -----------------> Virtual/Over-riding method
  
  - *UpCasting*: We can only access the static-methods defined in super-class(Parent)
                 We can access the overridden-methods of child-class.


  - *DownCasting*: We can access the sub-class specific methods.
                   It must be done Explicitly.

  
  Parent p ================> new Child();
  *reference*              *object-type*


- **Static-Binding**                                  |  - **Dynamic-Binding**
                                                      |
  - Aka *early-binding* because method to be called   |    - The type of object is determined at runtime.
    is determined based on the reference-type not on  |
    the object-type.                                  |
                                                      |
  - Resolved at compile-time.                         |    - Resolved at run-time.
  - Applies to static, private & final methods.       |    - Applies to over-ridden methods
  - Based on reference-type.                          |    - Based on actual-types.
                                                      |
                                                      |
                                                      |
                                                      |

- **Note**: Static-Methods can't be annotated with @Overridden.






------------------------------------------------------------------------------------<CHAPTER-VI>-----------------------------------------------------------------------------------------------
// Constructors, Variables & Operations


**Constructors**:

```Java

class Student {
    String name;
    int age;

    // In Java, If we call the class to create an object without creating the constructor, Java will automatically creates it's own constructor.

    // Constructor
    Student(){}
    
    // Parameterized Constructor
    Student (String inputName, int inputAge){
        this.name = name;
        this.age = inputAge;
    }


    // Copy Constructor [But We do have to define another constructor, As we've define "Copy Constructor".]
    Student (Student s){
        this.name = s.name;
        this.age = s.age;
    }
}

```





-----------------------------------------------------------------------------------------------------------------


# Variables in Java

- Giving name to a 'memory-location' that holds some data.
- Used in order to store the data & retrieve the data.

- The value that is stored in the variable can change during the program's execution, Hence the therm "Variable".

   - Java is case-sensitive.
   - Start with a letter or _.
   - CamelCase Convention.
   - Avoid reserved words. (new, int etc...)

   - "VAR" keyword: var number = 42 {JAVAC infers that "number" is an 'int'}.
   - If type of var is declared, It can't change later. (String ---> int).


- **Static-Variables**:   Variables belongs to class itself & not to any instance.

- **Instance-Variables**: Variables declared inside class but outside any methods.

- **Final-Variables**:    Variables can't be modified once it is initialized.




-----------------------------------------------------------------------------------------------------------------

# Operations

## Increment & Decrement Operators

```Java

int x = 5, y = 5;

int res = x++ + ++x;  // OP: x++ uses 5, then increments to 6, Then ++x increments to 7 & uses 7.
int res = ++y + y++;  // OP: ++y increments to 6 & uses 6, Then y++ uses 6, then increments to 7.


```


------------------------------------------------------------------------------------<CHAPTER-VII>-----------------------------------------------------------------------------------------------
// Packages, Access-Modifiers, Exceptions

### Packages in Java


- Contains related code (Built-In & User-Defined Packages).
- Ex. Java.util etc...

- Groups of similar types of classes, interfaces or sub-packages.

- Steps to create a package:
  - create a folder (ur_pkg_name)
  - create a file (ur_pkg_name/file.java)
  - Now compile the code as > `javac ur_pkg_name/file.java` > `java ur_pkg_name.file`
  - Outside of "package", U can't use Default class, (Use public class main)
  - if In current-working directory, No problems.
  - else, use classPath (an env. variable) ---> Temporary (Set ClassPath == `package-path;main-file path`).
                                        OR ---> Permanent (Set env. variable)



-----------------------------------------------------------------------------------------------------------------

## Access Modifiers in Java

- Types:

modifiers   - Same-Class      | - Same Package      | - Same Pkg          | - Diff. Pkg       | - Diff. Pkg 
                              |   & Sub-class       |   & non-subclass    |  & Sub-Class      | & non-sub-class

private         yes                  no                    no                   no                   no

default         yes                  yes                   yes                  no                   no

protected       yes                  yes                   yes                  yes                  no

public          yes                  yes                   yes                  yes                  yes



- **Note**: The access-modifiers for an overriding method can allow more but not les access to the over-ridden-method.

  - Ex. a protected instance method in super-class can be made public, But not private in sub-class.

  - final / static / private methods can-not be overridden.





-----------------------------------------------------------------------------------------------------------------


## Handeling Exceptions in Java


java.lang --------------> object --------------------> throwable --------------------> Errors
                                                          |
                                                          |
                                                          |
                                                          V
                                                        Exceptions

### Types

- **Checked-Exception**: [Compile-Time] Classes that directly inherit throwable class.

    - IOException [FileNotFoundException, EofException]
    - SQLException
    - NetWork & Class Exceptions

- **Unchecked-Exception**: [Run-Time] Ex. Arithmetic, IndexOutOfBounds, ClassCast & NullPointer Exception.

    - [NullPointerException, IndexOutOfBounds Exception]
    - [ClassCastException, Array, NullPointer, NumberFormatting, IllegalArgument] 

- **Errors**: [OutOfMemoryError, StackOverFlowError]



### Try-Catch-Finally

- **Try**: Allows you to define a block of code to be tested for errors while it's being executed.
- **Catch**: Allows you to define a block of code to be executed if an error occurs in the 'try' block.
- **Finally**: Let's you execute code, After `try...catch` block, Regardless the result.


### Throw / Throws

- **Throw**: Allows you to create a custom-errors, & is used together with an exception type. There're many exception types available in java.

    - Arithmetic Exception,
    - FileNoteFoundException,
    - ArrayIndexOutOfBoundsException,
    - SecurityException,

- **Throws**: Used to define which type of exception can be occured, It is written besides the methods.




-----------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------<CHAPTER-VIII>-----------------------------------------------------------------------------------------------
// Arrays
// Basics of Arrays

- Structure that allows us to store multiple elements of same type in a single variable.


# How to declare an array:

- type[] arrayName

- Dynamic array:     [ type[] arrayName = {x,y,z,...} ]

- Pre-Defined array: [ type[] arrayName = new type[n]; ] where n can be any natural number ie. 0 to 14

- new keyword:       Allows us to allocate memory to our array using "new" keyword


# Setting & Access an element of an array:

- arr[0] = 1; // Setting the 0th element of our array as 1

- System.out.println(arr[0]); // Printing the 0th element of our array



# Array length

- int len = arr.length; // using the "length" property of array




# More details about arrays

- Dynamically Allocated

- Arrays may be stored in contiguous memory [consecutive memory locations].

- Arrays are object and ordered (from 0).

- An array can be single-dimensional or multi-dimensional *.

- Array size is static & fixed length

- Faster, Because of the static size nature

- Can store primitive types (int, string, boolean, char, ...)

- Adding element. (arr[0] = value)

- Generics are not supported.




// Basic of ArrayLists---------------------------------------------------------------------------------------------------------------


- ArrayList is dynamic in size & have more flexibility.


# How to declare an arrayList:

- ArrayList<type> arrayName = new ArrayList<>();

- new keyword:       Allows us to allocate memory to our array using "new" keyword



# Setting & Access an element of an array:

- arr.add(1);  // adding element at the end to our arrayList

- arr.set(1, "element"); // Setting the 0th element of our array as 1

- System.out.println(arr.get(0)); // Printing the 0th element of our array



# Array length

- int len = arr.size(); // using the "size()" method of array





# More details about ArrayList

- ArrayList can be only a single-dimensional.

- user for-each loop / iterator / ListIterator.

- We can access length by using "size()".

- Array size is Dynamic.

- Relatively slower than arrays ( Because of resizing and dynamic ).

- Supports generics...

- Primitive data types are not directly added unlikely arrays [Added by using "autoboxing" & "unboxing" ].
